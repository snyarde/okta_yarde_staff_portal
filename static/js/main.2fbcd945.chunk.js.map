{"version":3,"sources":["components/layout/Navbar.js","components/pages/Home.js","components/pages/Staff.js","components/auth/SignInWidget.js","components/auth/Login.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","to","type","data-toggle","data-target","id","Component","Home","Staff","SignInWidget","el","ReactDOM","findDOMNode","this","widget","OktaSignIn","baseUrl","props","authParams","pkce","renderEl","onSuccess","onError","remove","withAuth","res","status","auth","redirect","sessionToken","session","token","err","console","log","state","authenticated","checkAuthentication","isAuthenticated","setState","pathname","config","issuer","redirectUri","window","location","origin","clientId","onAuthRequired","history","push","App","path","exact","component","render","ImplicitCallback","Boolean","hostname","match","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0UAuCeA,E,iLAlCX,OACE,yBAAKC,UAAU,oDACb,yBAAKA,UAAU,aACb,kBAAC,IAAD,CAAMA,UAAU,eAAeC,GAAG,KAAlC,qBAGA,4BACED,UAAU,iBACVE,KAAK,SACLC,cAAY,WACZC,cAAY,cAEZ,0BAAMJ,UAAU,yBAElB,yBAAKA,UAAU,2BAA2BK,GAAG,aAC3C,wBAAIL,UAAU,sBACZ,wBAAIA,UAAU,YACZ,kBAAC,IAAD,CAAMA,UAAU,WAAWC,GAAG,KAA9B,SAIF,wBAAID,UAAU,YACZ,kBAAC,IAAD,CAAMA,UAAU,WAAWC,GAAG,UAA9B,kB,GAxBKK,aCDN,SAASC,IACtB,OACE,6BACE,qCCHS,SAASC,IACtB,OACE,6BACE,sC,uCCsBSC,G,mMAnBX,IAAMC,EAAKC,IAASC,YAAYC,MAChCA,KAAKC,OAAS,IAAIC,IAAW,CAC3BC,QAASH,KAAKI,MAAMD,QACpBE,WAAY,CACVC,MAAM,KAGVN,KAAKC,OAAOM,SAAS,CAACV,MAAKG,KAAKI,MAAMI,UAAWR,KAAKI,MAAMK,W,6CAI5DT,KAAKC,OAAOS,W,+BAIZ,OAAO,kC,GAjBgBjB,cCDZkB,qBAAQ,YAEnB,WAAYP,GAAQ,IAAD,8BACjB,4CAAMA,KAoBRI,UAAY,SAAAI,GACV,GAAmB,YAAfA,EAAIC,OACN,OAAO,EAAKT,MAAMU,KAAKC,SAAS,CAC9BC,aAAcJ,EAAIK,QAAQC,SAxBb,EAiCnBT,QAAU,SAAAU,GACRC,QAAQC,IAAI,mBAAoBF,IA9BhC,EAAKG,MAAQ,CACXC,cAAe,MAEjB,EAAKC,sBAPY,EAFA,qLAaWxB,KAAKI,MAAMU,KAAKW,mBAb3B,QAaXF,EAbW,UAcKvB,KAAKsB,MAAMC,eAC/BvB,KAAK0B,SAAS,CAAEH,kBAfD,4FAoBjBvB,KAAKwB,wBApBY,+BAwCjB,OAAiC,OAA7BxB,KAAKsB,MAAMC,cAA+B,KACvCvB,KAAKsB,MAAMC,cAChB,kBAAC,WAAD,CAAUnC,GAAI,CAAEuC,SAAU,OAE1B,kBAAC,EAAD,CACExB,QAASH,KAAKI,MAAMD,QACpBK,UAAWR,KAAKQ,UAChBC,QAAST,KAAKS,cA/CD,GACDhB,cCKhBmC,G,OAAS,CACbC,OAAQ,6CACRC,YAAaC,OAAOC,SAASC,OAAS,qBACtCC,SAAU,uBACVC,eAIF,YAAmC,EAAVC,QACfC,KAAK,WAJb/B,MAAM,IAyBOgC,MAlBf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,WAAaV,EACZ,yBAAKzC,UAAU,OACb,kBAAC,EAAD,MACA,yBAAKA,UAAU,aACb,kBAAC,QAAD,CAAOoD,KAAK,IAAIC,OAAO,EAAMC,UAAW/C,IACxC,kBAAC,cAAD,CAAa6C,KAAK,SAASC,OAAO,EAAMC,UAAW9C,IACnD,kBAAC,QAAD,CAAO4C,KAAK,SAASG,OAAQ,kBAAM,kBAAC,EAAD,CAAOvC,QAAQ,mCAClD,kBAAC,QAAD,CAAOoC,KAAK,qBAAqBE,UAAWE,0BCrBpCC,QACW,cAA7Bb,OAAOC,SAASa,UAEe,UAA7Bd,OAAOC,SAASa,UAEhBd,OAAOC,SAASa,SAASC,MACvB,2DCZNhD,IAAS4C,OAAO,kBAAC,EAAD,MAASK,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.2fbcd945.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nclass Navbar extends Component {\r\n  render() {\r\n    return (\r\n      <nav className=\"navbar navbar-expand-sm navbar-dark bg-dark mb-4\">\r\n        <div className=\"container\">\r\n          <Link className=\"navbar-brand\" to=\"/\">\r\n            Acme Staff Portal\r\n          </Link>\r\n          <button\r\n            className=\"navbar-toggler\"\r\n            type=\"button\"\r\n            data-toggle=\"collapse\"\r\n            data-target=\"#navbarNav\"\r\n          >\r\n            <span className=\"navbar-toggler-icon\" />\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\r\n            <ul className=\"navbar-nav ml-auto\">\r\n              <li className=\"nav-item\">\r\n                <Link className=\"nav-link\" to=\"/\">\r\n                  Home\r\n                </Link>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <Link className=\"nav-link\" to=\"/staff\">\r\n                  Staff\r\n                </Link>\r\n              </li>\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Navbar;\r\n","import React from \"react\";\r\n\r\nexport default function Home() {\r\n  return (\r\n    <div>\r\n      <h1>Home</h1>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function Staff() {\r\n  return (\r\n    <div>\r\n      <h1>Staff</h1>\r\n    </div>\r\n  );\r\n}\r\n","import React, { Component } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport OktaSignIn from '@okta/okta-signin-widget';\r\nimport '@okta/okta-signin-widget/dist/css/okta-sign-in.min.css';\r\n// import '@okta/okta-signin-widget/dist/css/okta-theme.css';\r\n\r\nclass SignInWidget extends Component {\r\n  componentDidMount() {\r\n    const el = ReactDOM.findDOMNode(this);\r\n    this.widget = new OktaSignIn({\r\n      baseUrl: this.props.baseUrl,\r\n      authParams: {\r\n        pkce: true\r\n      }\r\n    });\r\n    this.widget.renderEl({el}, this.props.onSuccess, this.props.onError);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.widget.remove();\r\n  }\r\n\r\n  render() {\r\n    return <div />;\r\n  }\r\n};\r\n\r\nexport default SignInWidget;","import React, { Component } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport SignInWidget from \"./SignInWidget\";\r\nimport { withAuth } from \"@okta/okta-react\";\r\n\r\nexport default withAuth(\r\n  class Login extends Component {\r\n    constructor(props) {\r\n      super(props);\r\n      // this.onSuccess = this.onSuccess.bind(this);\r\n      // this.onError = this.onError.bind(this);\r\n      this.state = {\r\n        authenticated: null\r\n      };\r\n      this.checkAuthentication();\r\n    }\r\n\r\n    async checkAuthentication() {\r\n      const authenticated = await this.props.auth.isAuthenticated();\r\n      if (authenticated !== this.state.authenticated) {\r\n        this.setState({ authenticated });\r\n      }\r\n    }\r\n\r\n    componentDidUpdate() {\r\n      this.checkAuthentication();\r\n    }\r\n\r\n    onSuccess = res => {\r\n      if (res.status === \"SUCCESS\") {\r\n        return this.props.auth.redirect({\r\n          sessionToken: res.session.token\r\n        });\r\n      } else {\r\n        // The user can be in another authentication state that requires further action.\r\n        // For more information about these states, see:\r\n        //   https://github.com/okta/okta-signin-widget#rendereloptions-success-error\r\n      }\r\n    };\r\n\r\n    onError = err => {\r\n      console.log(\"error logging in\", err);\r\n    };\r\n\r\n    render() {\r\n      if (this.state.authenticated === null) return null;\r\n      return this.state.authenticated ? (\r\n        <Redirect to={{ pathname: \"/\" }} />\r\n      ) : (\r\n        <SignInWidget\r\n          baseUrl={this.props.baseUrl}\r\n          onSuccess={this.onSuccess}\r\n          onError={this.onError}\r\n        />\r\n      );\r\n    }\r\n  }\r\n);\r\n","import React from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport { Security, SecureRoute, ImplicitCallback } from \"@okta/okta-react\";\n\nimport Navbar from \"./components/layout/Navbar\";\nimport Home from \"./components/pages/Home\";\nimport Staff from \"./components/pages/Staff\";\nimport Login from \"./components/auth/Login\";\n\nimport \"./App.css\";\n\nconst config = {\n  issuer: 'https://dev-999896.okta.com/oauth2/default',\n  redirectUri: window.location.origin + '/implicit/callback',\n  clientId: '0oa26kok566LysAAm357',\n  onAuthRequired: onAuthRequired,\n  pkce: true\n}\n\nfunction onAuthRequired({history}) {\n  history.push('/login');\n}\n\nfunction App() {\n  return (\n    <Router>\n      <Security {...config}>\n        <div className=\"App\">\n          <Navbar />\n          <div className=\"container\">\n            <Route path=\"/\" exact={true} component={Home} />\n            <SecureRoute path=\"/staff\" exact={true} component={Staff} />\n            <Route path='/login' render={() => <Login baseUrl='https://dev-999896.okta.com' />} />\n            <Route path='/implicit/callback' component={ImplicitCallback} />\n          </div>\n        </div>\n      </Security>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}